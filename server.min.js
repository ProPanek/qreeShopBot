/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./server.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./db/db_qree.js":
/*!***********************!*\
  !*** ./db/db_qree.js ***!
  \***********************/
/*! exports provided: createQree, editUserJira, findGame, approxQrCount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createQree", function() { return createQree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editUserJira", function() { return editUserJira; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findGame", function() { return findGame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "approxQrCount", function() { return approxQrCount; });
/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ "pg");
/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_0__);
__webpack_require__(/*! dotenv */ "dotenv").config()


function createDBclient() {
  return  new pg__WEBPACK_IMPORTED_MODULE_0__["Client"]({
    connectionString: process.env.DATABASE_URL
  })
}

async function createQree(qrData, qrLink, name, platform, region, size, uploader_discord_id) {
  const client = createDBclient()
  try {
    await client.connect();
    await client.query(`INSERT INTO qre_items(qr_data, qr_link, name, platform, region, size, uploader_discord_id) VALUES('${qrData}', '${qrLink}', '${name}' , '${platform}', '${region}', '${size}', '${uploader_discord_id}')`);
    await client.end();
    console.log('DB -> save qr in DB')
  } catch (e) {
    console.log(e)
  }
}

async function editUserJira (
  jiraLogin,
  jiraPassword,
  jiraSubdomain,
  userId
) {
  const client = createDBclient()
  await client.connect()
  try {
    await client.query(
      `UPDATE users SET jira_email = '${jiraLogin}', jira_api_key = '${jiraPassword}', jira_subdomain = '${[
        jiraSubdomain
      ]}'  WHERE user_id = '${userId}'`
    )
    console.log('DB -> save jira credentials in DB')
    await client.end()
  } catch (e) {
    console.log(e)
  }
}

async function findGame(name) {
  const client = createDBclient()
  try {
    await client.connect()
    const res = await client.query(
      `SELECT * FROM qre_items WHERE name ILIKE '%${name}%';`
    )
    console.log('DB -> game found in DB')
    await client.end()
    return res
  } catch (e) {
    console.log(e)
  }
}

async function approxQrCount(name) {
  const client = createDBclient()
  try {
    await client.connect()
    const res = await client.query(
        `SELECT COUNT(*) FROM qre_items`
    )
    console.log('DB -> counting qr codes')
    await client.end()
    return res
  } catch (e) {
    console.log(e)
  }
}


/***/ }),

/***/ "./helpers/helpers.js":
/*!****************************!*\
  !*** ./helpers/helpers.js ***!
  \****************************/
/*! exports provided: parseDropboxLink, parseGDriveLink, createASCIIQrCode, createEmbeddedAnswer, checkIfDM, regexes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseDropboxLink", function() { return parseDropboxLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseGDriveLink", function() { return parseGDriveLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createASCIIQrCode", function() { return createASCIIQrCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEmbeddedAnswer", function() { return createEmbeddedAnswer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkIfDM", function() { return checkIfDM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "regexes", function() { return regexes; });
/* harmony import */ var qrcode_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qrcode-generator */ "qrcode-generator");
/* harmony import */ var qrcode_generator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(qrcode_generator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! discord.js */ "discord.js");
/* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(discord_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! discord-paginationembed */ "discord-paginationembed");
/* harmony import */ var discord_paginationembed__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__);




function parseDropboxLink(link){
  let string = link;
  string = string.split("/");
  string[5] = '?dl=1';
  string = string.join("/")
  return string
}

function parseGDriveLink(link){
  return link.replace(/\/file\/d\/(.+)\/(.+)/, "/uc?export=download&id=$1");
}

function createASCIIQrCode(link){
  let qr = qrcode_generator__WEBPACK_IMPORTED_MODULE_0___default()(0, 'M');
  qr.addData(`${link}`);
  qr.make();
  return qr.createASCII()
}

function createEmbeddedAnswer(args, receivedMessage, destination){
  const embeds = [];
  args.map(({qr_data, qr_link, name, platform, region , size}, index) => {
    embeds.push(new discord_js__WEBPACK_IMPORTED_MODULE_1__["MessageEmbed"]()
      .addField('Page', index + 1, true)
      .addField('Name: ', name, true)
      .addField('QR: ', "```"+ qr_data +"```")
      .addField('QR link: ', qr_link, true)
      .addBlankField()
      .addField('Platform: ', platform, true)
      .addField('Region: ', region, true)
      .addField('Size: ', size, true)
    );
  })

  return  new discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__["Embeds"]()
    .setArray(embeds)
    .setAuthorizedUsers([receivedMessage.author.id])
    .setChannel(destination === "pm" ? receivedMessage.author : receivedMessage.channel)
    .setPageIndicator(true)
    .setPage(1)
    // Methods below are for customising all embeds
    .setTitle('Qr Code 3DS games search collection')
    .setDescription('==========================================================')
    .setFooter('')
    .setColor(0xFFFFFF)
    .setNavigationEmojis({
      back: '◀',
      jump: '↗',
      forward: '▶',
      delete: '🗑'
    })
    .setTimeout(600000)
    // .on('start', () => console.log('Started!'))
    // // Upon a user deleting the embed
    // .on('finish', (user) => console.log(`Finished! User: ${user.username}`))
    // // Upon a user reacting to the embed
    // .on('react', (user, emoji) => console.log(`Reacted! User: ${user.username} | Emoji: ${emoji.name} (${emoji.id})`))
    // // Upon the awaiting time expired
    // .on('expire', () => console.warn('Expired!'))
    // // Upon non-PaginationEmbed error (e.g: Discord API Error)
    // .on('error', console.error)


}

function checkIfDM(receivedMessage){
  return receivedMessage.channel.type === 'dm'
}

const regexes = {
  DROPBOX: /\b(\w*dropbox\w*)\b/g,
  GDRIVE: /\b(\w*drive.google.com\w*)\b/g,
  URL: /(http|ftp|https):\/\/([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?/g,
  ARGUMENTS: /(http|ftp|https):\/\/([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?|\w+|"(?:\\"|[^"])+"|\'(?:\\'|[^'])+'|\S+/g,
  REGIONS: /\b(\w*USA|JPN|EUR|GLOBAL|HACK\w*)\b/g
}
//(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?\w+|"(?:\\"|[^"])+"|'(?:\\'|[^"])+'|\w+


/***/ }),

/***/ "./models/database.js":
/*!****************************!*\
  !*** ./models/database.js ***!
  \****************************/
/*! exports provided: initializeDb */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeDb", function() { return initializeDb; });
/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ "pg");
/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_0__);
__webpack_require__(/*! dotenv */ "dotenv").config()




async function initializeDb() {
	try {
		const client = await new pg__WEBPACK_IMPORTED_MODULE_0__["Client"]({
			connectionString: process.env.DATABASE_URL
		})
		await client.connect()
		await client.query(
			"CREATE TABLE IF NOT EXISTS qre_items(id SERIAL PRIMARY KEY, " +
			"qr_data text not null, " +
			"qr_link varchar not null, " +
			"name varchar not null, " +
			"platform varchar not null, " +
			"region varchar not null," +
			"size varchar not null," +
			"uploader_discord_id varchar not null" +
			")"
		)

		client.end()
	} catch (e) {
		console.log(e)
	}
}


/***/ }),

/***/ "./server.js":
/*!*******************!*\
  !*** ./server.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! discord.js */ "discord.js");
/* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(discord_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/helpers */ "./helpers/helpers.js");
/* harmony import */ var _models_database__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/database */ "./models/database.js");
/* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./db/db_qree */ "./db/db_qree.js");
__webpack_require__(/*! dotenv */ "dotenv").config()






void (async function () {
  try {
    await Object(_models_database__WEBPACK_IMPORTED_MODULE_2__["initializeDb"])()
    console.log("DB -> init DB")
  }
  catch (e) {
    console.log(e)
  }

  try {
    await client.login(process.env.BOT_TOKEN)
  } catch (e) {
    console.log(e)
  }

})()

const client = new discord_js__WEBPACK_IMPORTED_MODULE_0__["Client"]()
let botInvoker = process.env.BOT_DEFAULT_INVOKE
let serverInvokers = new Map()

client.on('ready', async () => {
  console.log('On Discord!');
  console.log("Connected as " + client.user.tag)
  console.log("Servers:")
  client.guilds.forEach((guild) => {
    serverInvokers.set(guild.id, botInvoker)
    console.log(" - " + guild.id)
    guild.channels.forEach((channel) => {
      console.log(` -- ${channel.name} (${channel.type}) - ${channel.id}`)
    })

    console.log(serverInvokers)
  })

  setInterval(async ()=>{
    const qrCount = await Object(_db_db_qree__WEBPACK_IMPORTED_MODULE_3__["approxQrCount"])()
    qrCount.rows.map( async ({count}) => {
      await client.user.setActivity(`QR Codes count: ${count}`, { type: 'PLAYING' });
    })
  },60000)
})

client.on('message', (receivedMessage) => {
  if (receivedMessage.author === client.user) { // Prevent bot from responding to its own messages
    return
  }
  console.log(receivedMessage.channel.type)

  if (receivedMessage.channel.type === 'dm'){
    if (receivedMessage.content.startsWith(`${botInvoker}`)) {
      processCommand(receivedMessage)
    }
  } else {
    if (receivedMessage.content.startsWith(`${serverInvokers.get(receivedMessage.guild.id)}`)) {
      processCommand(receivedMessage)
    }
  }
})

function processCommand(receivedMessage) {
  let fullCommand, primaryCommand;

  Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["checkIfDM"])(receivedMessage) ?
    fullCommand = receivedMessage.content.substr(botInvoker.length + 1) :
    fullCommand = receivedMessage.content.substr(serverInvokers.get(receivedMessage.guild.id).length + 1)

  const messageArguments = fullCommand.match(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["regexes"].ARGUMENTS)

  if (messageArguments !== null && messageArguments.length) {
    primaryCommand = messageArguments[0] // The first word directly after the exclamation is the command
  }

  if(primaryCommand === "" || primaryCommand === null || primaryCommand === undefined){
    Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["checkIfDM"])(receivedMessage) ?
      receivedMessage.channel.send(
      `You need to specify which command you want to use type "!qre help" to display available commands`
      ) :
      receivedMessage.channel.send(
      `You need to specify which command you want to use type "${serverInvokers.get(receivedMessage.guild.id)} help" to display available commands`
      );
    return
  }

  if(primaryCommand === "help"){
    Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["checkIfDM"])(receivedMessage) ?
      receivedMessage.channel.send(
        "```qreeShopBot Help page\n\n" +
        "NOTE: \n" +
        "dm's - you are searching for help in bot DM, here you can only search for games \n\n" +
        "search - !qre search \"<name>\" \n" +
        "example: !qre search \"Super Mario 3\"```"
      ) :
      receivedMessage.channel.send(
        "**qreeShopBot Help page**\n\n" +
        "**NOTE:** \n" +
        "```links - you can provide direct link or normal sharing links from google and dropbox it will be automatically converted into direct ones```\n" +
        "**COMMANDS**: \n\n" +
        "**UPLOAD**\n" +
        "```upload - upload is available only in certain servers on Discord and only available to users containing special role(s). Remember about quotation marks in title of the game!```\n" +
        "command: ```"+ serverInvokers.get(receivedMessage.guild.id) +" upload <url> \"<name>\" <platform> <region> <size> ```\n" +
        "example: ```"+ serverInvokers.get(receivedMessage.guild.id) +" upload https://files.catbox.moe/au9pkx.cia \"Super Castlevania IV\" GBA USA 5MB ```\n\n" +
        "**SEARCH**\n" +
        "```search -  It's available on channels and DM's, it will search for all games containing typed phrase. (emoji navigation in dm's is a little buggy but it works)```" +
        "command: ```"+ serverInvokers.get(receivedMessage.guild.id) +" search \"<name>\" ```\n" +
        "example: ```"+ serverInvokers.get(receivedMessage.guild.id) +" search \"Super Mario 3\"```\n" +
        "**INVOKE** - \n" +
        "```invoke - server only command which lets you change the command for invoking bot the default is always !qre```" +
        "command: ```"+ serverInvokers.get(receivedMessage.guild.id) +" invoke <new_command> ```\n" +
        "example: ```"+ serverInvokers.get(receivedMessage.guild.id) +" invoke %qre```\n" +
        ""
      );
    return
  }

  if (!Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["checkIfDM"])(receivedMessage)) {
    if(process.env.BOT_PERMISSIONS_GUILD.includes(receivedMessage.guild.id) && receivedMessage.member.roles.some(r=>process.env.BOT_PERMISSIONS_ROLES.includes(r.name)) ) {
      if(primaryCommand === "upload"){
        return handleGameUpload(messageArguments, receivedMessage)
      }

      if(primaryCommand === "invoke"){
        return changeInvokeCommand(messageArguments, receivedMessage)
      }
    } else {
      return  receivedMessage.channel.send('You have no permissions to use this commands')
    }

  }

  if(primaryCommand === "search"){
    return searchGame(messageArguments, receivedMessage)
  }

  return receivedMessage.channel.send(
      `Command not found`
  )

}

function changeInvokeCommand(messageArguments, receivedMessage) {
  if (receivedMessage.channel.type === 'dm'){
    return  receivedMessage.channel.send(
        `This command is available only in servers`
    )
  }

  if (messageArguments.length > 3){
    return  receivedMessage.channel.send(
      `Too much arguments for invoke command`
    )
  }

  if (messageArguments[1]) {
    serverInvokers.set(receivedMessage.guild.id, messageArguments[1])
    return  receivedMessage.channel.send(
      `Successfully changed your invoke command`
    )
  }

}

async function handleGameUpload(messageArguments, receivedMessage){
  let link
  if (messageArguments.length !== 6){
    return  receivedMessage.channel.send(
        `invalid arguments count for upload command`
    )
  }

  if (messageArguments[1].match(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["regexes"].GDRIVE)){
    link = Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["parseGDriveLink"])(messageArguments[1])
  } else if (messageArguments[1].match(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["regexes"].DROPBOX)) {
    messageArguments[1].slice(-1) === "0" ? link = Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["parseDropboxLink"])(messageArguments[1]) : link = messageArguments[1]
  } else {
    link = messageArguments[1]
  }

  if (!messageArguments[4].match(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["regexes"].REGIONS)){
    return  receivedMessage.channel.send(
        `invalid region argument for upload command`
    )
  }

  if (link.match(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["regexes"].URL)){
    const qr = Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["createASCIIQrCode"])(link)
    const name = messageArguments[2].replace(/^"(.*)"$/, '$1')

    const {rows} = await Object(_db_db_qree__WEBPACK_IMPORTED_MODULE_3__["findGame"])(name)
    const text = rows.length === 0 ?
      "```diff\n" +
      "+ This is how it will look, save in database? Type 'yes'/'no' or 'search' if you want to check about what games I was talking about :)" +
      "\n```" :
      "```diff\n" +
      "+ There are games with similar name, check by searching them first before uploading" +
      "\n```" +
      "```diff\n" +
      "+ This is how it will look, save in database? Type 'yes'/'no' or 'search' if you want to check about what games I was talking about :)" +
      "\n```"

    await receivedMessage.channel.send(
        "```" + qr +
        "\nLink: " + link +
        "\n\nName: " + name +
        "\nPlatform: " + messageArguments[3] +
        "\nRegion: " + messageArguments[4] +
        "\nSize: " + messageArguments[5] +
        "```" +
        text
    )

    const collector = new discord_js__WEBPACK_IMPORTED_MODULE_0__["MessageCollector"](receivedMessage.channel, m => m.author.id === receivedMessage.author.id, { time: 60000 });
    collector.on('collect', async message => {
      if (message.content === "yes") {

        try {

          await receivedMessage.channel.send("Saving in database!");
          await Object(_db_db_qree__WEBPACK_IMPORTED_MODULE_3__["createQree"])(qr, link, name, messageArguments[3], messageArguments[4], messageArguments[5], receivedMessage.author.id)

        } catch (e) {

          console.log(e)
          receivedMessage.channel.send(
              "something went wrong, send it to developer: \n" +
              "```diff\n- " + e + "```"
          );

        }

        collector.stop()

      } else if (message.content === "no") {
        try {

          await receivedMessage.channel.send("Ok try again later :P");

        } catch (e) {
          console.log(e)
           await receivedMessage.channel.send(
            "something went wrong, send it to developer: \n" +
            "```diff\n- " + e + "```"
          );
        }
        collector.stop()
      } else if (message.content === "search") {

        try {
          await receivedMessage.channel.send("```Ok, displaying games that I have found you can type 'yes'/'no' still```");

          const QrCodesSearchResults = Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["createEmbeddedAnswer"])(rows, receivedMessage)
          await QrCodesSearchResults.build()
        } catch (e) {
          console.log(e)
          receivedMessage.channel.send(
            "something went wrong, send it to developer: \n" +
            "```diff\n- " + e + "```"
          );
        }

      }
    })

    collector.on('end', async () => {
      await receivedMessage.channel.send("Upload session ended");
    });

  } else {
    return  receivedMessage.channel.send(
      `specify a valid url`
    )
  }
}

async function searchGame(messageArguments, receivedMessage){
  try {
    // const games = await findGame(messageArguments[1])
    console.log(messageArguments)
    if (messageArguments.length > 3){
      return  await receivedMessage.channel.send(
          `invalid arguments for search command`
      )
    }

    const name = messageArguments[1].replace(/^"(.*)"$/, '$1')
    const {rows} = await Object(_db_db_qree__WEBPACK_IMPORTED_MODULE_3__["findGame"])(name)
    if (rows.length === 0){
      await receivedMessage.author.send(`I didn't find anything called ${messageArguments[1]}`);
    } else {
      const QrCodesSearchResults = Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["createEmbeddedAnswer"])(rows, receivedMessage)
      await QrCodesSearchResults.build()
    }

  } catch (e) {
    console.log(e)
    await receivedMessage.channel.send(
        "something went wrong, send it to developer: \n" +
        "```diff\n- " + e + "```"
    );
  }
}


/***/ }),

/***/ "discord-paginationembed":
/*!******************************************!*\
  !*** external "discord-paginationembed" ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("discord-paginationembed");

/***/ }),

/***/ "discord.js":
/*!*****************************!*\
  !*** external "discord.js" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("discord.js");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("dotenv");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("pg");

/***/ }),

/***/ "qrcode-generator":
/*!***********************************!*\
  !*** external "qrcode-generator" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("qrcode-generator");

/***/ })

/******/ });