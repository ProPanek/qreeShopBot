/******/ (function(modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/ var installedModules = {}; // The require function
  /******/
  /******/ /******/ function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/ if (installedModules[moduleId]) {
      /******/ return installedModules[moduleId].exports;
      /******/
    } // Create a new module (and put it into the cache)
    /******/ /******/ var module = (installedModules[moduleId] = {
      /******/ i: moduleId,
      /******/ l: false,
      /******/ exports: {}
      /******/
    }); // Execute the module function
    /******/
    /******/ /******/ modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    ); // Flag the module as loaded
    /******/
    /******/ /******/ module.l = true; // Return the exports of the module
    /******/
    /******/ /******/ return module.exports;
    /******/
  } // expose the modules object (__webpack_modules__)
  /******/
  /******/
  /******/ /******/ __webpack_require__.m = modules; // expose the module cache
  /******/
  /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
  /******/
  /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
    /******/ if (!__webpack_require__.o(exports, name)) {
      /******/ Object.defineProperty(exports, name, {
        enumerable: true,
        get: getter
      });
      /******/
    }
    /******/
  }; // define __esModule on exports
  /******/
  /******/ /******/ __webpack_require__.r = function(exports) {
    /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
      /******/ Object.defineProperty(exports, Symbol.toStringTag, {
        value: "Module"
      });
      /******/
    }
    /******/ Object.defineProperty(exports, "__esModule", { value: true });
    /******/
  }; // create a fake namespace object // mode & 1: value is a module id, require it // mode & 2: merge all properties of value into the ns // mode & 4: return value when already ns object // mode & 8|1: behave like require
  /******/
  /******/ /******/ /******/ /******/ /******/ /******/ __webpack_require__.t = function(
    value,
    mode
  ) {
    /******/ if (mode & 1) value = __webpack_require__(value);
    /******/ if (mode & 8) return value;
    /******/ if (
      mode & 4 &&
      typeof value === "object" &&
      value &&
      value.__esModule
    )
      return value;
    /******/ var ns = Object.create(null);
    /******/ __webpack_require__.r(ns);
    /******/ Object.defineProperty(ns, "default", {
      enumerable: true,
      value: value
    });
    /******/ if (mode & 2 && typeof value != "string")
      for (var key in value)
        __webpack_require__.d(
          ns,
          key,
          function(key) {
            return value[key];
          }.bind(null, key)
        );
    /******/ return ns;
    /******/
  }; // getDefaultExport function for compatibility with non-harmony modules
  /******/
  /******/ /******/ __webpack_require__.n = function(module) {
    /******/ var getter =
      module && module.__esModule
        ? /******/ function getDefault() {
            return module["default"];
          }
        : /******/ function getModuleExports() {
            return module;
          };
    /******/ __webpack_require__.d(getter, "a", getter);
    /******/ return getter;
    /******/
  }; // Object.prototype.hasOwnProperty.call
  /******/
  /******/ /******/ __webpack_require__.o = function(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }; // __webpack_public_path__
  /******/
  /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
  /******/
  /******/
  /******/ /******/ return __webpack_require__(
    (__webpack_require__.s = "./server.js")
  );
  /******/
})(
  /************************************************************************/
  /******/ {
    /***/ "./commands/edit.js":
      /*!**************************!*\
  !*** ./commands/edit.js ***!
  \**************************/
      /*! exports provided: handleGameEdit */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "handleGameEdit",
          function() {
            return handleGameEdit;
          }
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ../db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! discord.js */ "discord.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          discord_js__WEBPACK_IMPORTED_MODULE_1__
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! ../helpers/helpers */ "./helpers/helpers.js"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! pg-escape */ "pg-escape"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          pg_escape__WEBPACK_IMPORTED_MODULE_3__
        );
        /* harmony import */ var image_data_uri__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! image-data-uri */ "image-data-uri"
        );
        /* harmony import */ var image_data_uri__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          image_data_uri__WEBPACK_IMPORTED_MODULE_4__
        );

        async function handleGameEdit(messageArguments, receivedMessage) {
          try {
            const id = parseInt(messageArguments[1]);
            const { rows } = await Object(
              _db_db_qree__WEBPACK_IMPORTED_MODULE_0__["findGameToEdit"]
            )(id);
            if (rows.length) {
              const collector = new discord_js__WEBPACK_IMPORTED_MODULE_1__[
                "MessageCollector"
              ](
                receivedMessage.channel,
                m => m.author.id === receivedMessage.author.id,
                { time: 120000 }
              );

              await receivedMessage.channel.send("", {
                files: [rows[0].qr_image_url]
              });

              await receivedMessage.channel.send(
                "```" +
                  "\nLink: " +
                  rows[0].qr_link +
                  "\n\nName: " +
                  rows[0].name +
                  "\nPlatform: " +
                  rows[0].platform +
                  "\nRegion: " +
                  rows[0].region +
                  "\nSize: " +
                  rows[0].size +
                  "\nUploader: " +
                  rows[0].uploader_name +
                  "```" +
                  "```" +
                  "Is this the game you wish to edit? type 'yes'/'no'" +
                  "```"
              );
              collector.on("collect", async message => {
                if (message.content.toLowerCase() === "yes") {
                  await receivedMessage.channel.send(
                    "```please type all the information you want to edit, remember that title NEEDS to be in quotation marks. You can type all info you want to edit in one or more messages.```" +
                      "```type `end` if you want to finish```"
                  );
                }
                if (message.content.toLowerCase() === "no") {
                  collector.stop();
                  await receivedMessage.channel.send(
                    "``` Ok, will not do anything with it ```"
                  );
                }

                if (message.content.toLowerCase() === "end") {
                  collector.stop();
                }
              });

              collector.on("end", async collected => {
                let collectedArguments = [];
                for (const item of collected) {
                  collectedArguments.push(item[1].content);
                }
                collectedArguments.shift();
                collectedArguments.pop();
                const args = collectedArguments
                  .join(" ")
                  .match(
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["regexes"]
                      .ARGUMENTS
                  );

                let url, title, region, platform, size;
                const urlIndex = await args.findIndex(value =>
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                    "regexes"
                  ].URL.test(value)
                );
                if (urlIndex === -1) {
                  await receivedMessage.channel.send(
                    `argument \`URL\` is missing continue...`
                  );
                } else {
                  url = messageArguments[urlIndex];
                  messageArguments.splice(urlIndex, 1);
                  await receivedMessage.channel.send(
                    `argument \`URL\` is present!`
                  );
                }

                const titleIndex = await args.findIndex(value =>
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                    "regexes"
                  ].TITLE.test(value)
                );
                if (titleIndex === -1) {
                  await receivedMessage.channel.send(
                    `argument \`TITLE\` is missing continue...`
                  );
                } else {
                  title = messageArguments[titleIndex];
                  messageArguments.splice(titleIndex, 1);
                  await receivedMessage.channel.send(
                    `argument \`TITLE\` is present!`
                  );
                }

                const regionIndex = await args.findIndex(value =>
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                    "regexes"
                  ].REGIONS.test(value)
                );
                if (regionIndex === -1) {
                  await receivedMessage.channel.send(
                    `argument \`REGION\` is missing continue...`
                  );
                } else {
                  region = messageArguments[regionIndex];
                  messageArguments.splice(regionIndex, 1);
                  await receivedMessage.channel.send(
                    `argument \`REGION\` is present!`
                  );
                }

                const platformIndex = await args.findIndex(value =>
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                    "regexes"
                  ].PLATFORMS.test(value)
                );
                if (platformIndex === -1) {
                  await receivedMessage.channel.send(
                    `argument \`PLATFORM\` is missing continue...`
                  );
                } else {
                  platform = messageArguments[platformIndex];
                  messageArguments.splice(platformIndex, 1);
                  await receivedMessage.channel.send(
                    `argument \`PLATFORM\` is present!`
                  );
                }

                const sizeIndex = await args.findIndex(value =>
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                    "regexes"
                  ].SIZE.test(value)
                );
                if (sizeIndex === -1) {
                  await receivedMessage.channel.send(
                    `argument \`SIZE\` is missing continue...`
                  );
                } else {
                  size = messageArguments[sizeIndex];
                  messageArguments.splice(sizeIndex, 1);
                  await receivedMessage.channel.send(
                    `argument \`SIZE\` is present!`
                  );
                }

                console.log(url, title, region, size, platform);

                if (title) {
                  title = pg_escape__WEBPACK_IMPORTED_MODULE_3___default.a
                    .string(title.replace(/^"(.*)"$/, "$1"))
                    .replace(/'/g, "''");
                }

                const obj = {
                  name: title ? title : rows[0].name,
                  qr_link: url || rows[0].qr_link,
                  qr_data: url
                    ? await Object(
                        _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                          "createASCIIQrCode"
                        ]
                      )(url)
                    : rows[0].qr_data,
                  qr_image_url: url
                    ? await Object(
                        _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__[
                          "createDataURLQrCode"
                        ]
                      )(url)
                    : rows[0].qr_image_url,
                  platform: platform || rows[0].platform,
                  region: region || rows[0].region,
                  size: size || rows[0].size,
                  uploader_discord_id: rows[0].uploader_discord_id,
                  uploader_name: rows[0].uploader_name
                };

                if (url) {
                  let string =
                    obj.name +
                    obj.platform +
                    obj.region +
                    obj.uploader_discord_id;
                  string = string
                    .replace(/[^a-z0-9]/gim, "")
                    .replace(/\s+/g, "");
                  await image_data_uri__WEBPACK_IMPORTED_MODULE_4___default.a.outputFile(
                    obj.qr_image_url,
                    "./img/" + string + ".png"
                  );

                  await receivedMessage.channel
                    .send("", {
                      files: ["./img/" + string + ".png"]
                    })
                    .then(msg => {
                      obj.qr_image_url = msg.attachments
                        .values()
                        .next().value.proxyURL;
                    });
                }
                obj.name = pg_escape__WEBPACK_IMPORTED_MODULE_3___default.a
                  .string(obj.name.replace(/^"(.*)"$/, "$1"))
                  .replace(/'/g, "''");
                await Object(
                  _db_db_qree__WEBPACK_IMPORTED_MODULE_0__["editQree"]
                )(
                  id,
                  obj.qr_data,
                  obj.qr_image_url,
                  obj.qr_link,
                  obj.name,
                  obj.platform,
                  obj.region,
                  obj.size,
                  obj.uploader_discord_id,
                  obj.uploader_name
                );
                await receivedMessage.channel.send("Edited!");
              });
            } else {
              await receivedMessage.channel.send("cant find it in database");
            }
          } catch (e) {
            console.log(e);
            await receivedMessage.channel.send(
              "something went wrong, send it to developer: \n" +
                "```diff\n- " +
                e +
                "```"
            );
          }
        }

        /***/
      },

    /***/ "./commands/help.js":
      /*!**************************!*\
  !*** ./commands/help.js ***!
  \**************************/
      /*! exports provided: createEmbeddedHelper */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createEmbeddedHelper",
          function() {
            return createEmbeddedHelper;
          }
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! discord.js */ "discord.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          discord_js__WEBPACK_IMPORTED_MODULE_0__
        );
        /* harmony import */ var discord_paginationembed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! discord-paginationembed */ "discord-paginationembed"
        );
        /* harmony import */ var discord_paginationembed__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          discord_paginationembed__WEBPACK_IMPORTED_MODULE_1__
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! ../helpers/helpers */ "./helpers/helpers.js"
        );

        function createEmbeddedHelper(
          serverInvokers,
          receivedMessage,
          destination
        ) {
          const embeds = [];

          if (
            Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["checkIfDM"])(
              receivedMessage
            )
          ) {
            embeds.push(
              new discord_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmbed"]()
                .addField("**COMMAND**: ", "```search```")
                .addField(
                  "Description",
                  "```search -  It's available on channels and DM's, it will search for all games containing typed phrase. (emoji navigation in dm's is a little buggy but it works)```"
                )
                .addField("Command: ", '```!qre search "<name>" ```')
                .addField(
                  "Example: ",
                  '```!qre search "Super Castlevania IV"```'
                )
            );
          } else {
            embeds.push(
              new discord_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmbed"]()
                .addField("**COMMAND**: ", "```upload```")
                .addField(
                  "Description",
                  "```upload - upload is available only in certain servers on " +
                    "Discord and only available to users containing special role(s). " +
                    "Remember about quotation marks in title of the game!```"
                )
                .addField(
                  "Arguments: ",
                  "```" +
                    "<platform> -  GBA, NES, SNES, 3DS, DSI, ESHOP, NEW 3DS, NEO GEO, VC, MD, GB \n\n" +
                    "<regions> - USA, JPN, EUR, GLOBAL, HACK \n\n" +
                    "<size> - *KB, *MB, *GB \n" +
                    "```"
                )
                .addField(
                  "Command: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    ' upload <url> "<name>" <platform> <region> <size> ```'
                )

                .addField(
                  "Example: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    ' upload https://files.catbox.moe/au9pkx.cia "Super Castlevania IV" GBA USA 5MB ```'
                )
            );

            embeds.push(
              new discord_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmbed"]()
                .addField("**COMMAND**: ", "```edit```")
                .addField(
                  "Description",
                  "```edit - edit same as upload is available only in certain servers on " +
                    "Discord and only available to users containing special role(s). " +
                    "First you need to find the game you want to edit, just search it with search command and copy `DB ID` number" +
                    "then you proceed by typing edit command with this id ad you copied. After the game is found follow the instructions" +
                    "```"
                )
                .addField(
                  "Arguments: ",
                  "```" +
                    "<platform> - GBA, NES, SNES, 3DS, DSI, ESHOP, NEW 3DS, NEO GEO, VC, MD, GB \n\n" +
                    "<regions> - USA, JPN, EUR, GLOBAL, HACK \n\n" +
                    "<size> - *KB, *MB, *GB \n" +
                    "```"
                )
                .addField(
                  "Command: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    " edit <id> ```"
                )

                .addField(
                  "Example: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    " edit 10 ```"
                )
            );

            embeds.push(
              new discord_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmbed"]()
                .addField("**COMMAND**: ", "```search```")
                .addField(
                  "Description",
                  "```search -  It's available on channels and DM's, it will search for all games containing typed phrase. (emoji navigation in dm's is a little buggy but it works)```"
                )
                .addField(
                  "Command: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    ' search "<name>" ```'
                )
                .addField(
                  "Example: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    ' search "Super Castlevania IV"```'
                )
            );

            embeds.push(
              new discord_js__WEBPACK_IMPORTED_MODULE_0__["MessageEmbed"]()
                .addField("**COMMAND**: ", "```invoke```")
                .addField(
                  "Description",
                  "```invoke - server only command which lets you change the command for invoking bot the default is always !qre```"
                )
                .addField(
                  "Command: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    " invoke <new_command> ```"
                )
                .addField(
                  "Example: ",
                  "```" +
                    serverInvokers.get(receivedMessage.guild.id) +
                    "invoke %qre```"
                )
            );
          }

          return (
            new discord_paginationembed__WEBPACK_IMPORTED_MODULE_1__["Embeds"]()
              .setArray(embeds)
              .setAuthorizedUsers([receivedMessage.author.id])
              .setChannel(
                destination === "pm"
                  ? receivedMessage.author
                  : receivedMessage.channel
              )
              .setPageIndicator(true)
              .setPage(1)
              // Methods below are for customising all embeds
              .setTitle("Qr Code 3DS help")
              .setDescription(
                "=========================================================="
              )
              .addField(
                "NOTE:",
                "```links - you can provide direct link or normal sharing links from google and dropbox it will be automatically converted into direct ones```"
              )
              .setFooter("")
              .setColor(0xffffff)
              .setNavigationEmojis({
                back: "◀",
                jump: "↗",
                forward: "▶",
                delete: "🗑"
              })
              .setTimeout(600000)
          );
        }

        /***/
      },

    /***/ "./commands/images.js":
      /*!****************************!*\
  !*** ./commands/images.js ***!
  \****************************/
      /*! exports provided: makeQrImagesfromDB */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "makeQrImagesfromDB",
          function() {
            return makeQrImagesfromDB;
          }
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ../helpers/helpers */ "./helpers/helpers.js"
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ../db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! discord.js */ "discord.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          discord_js__WEBPACK_IMPORTED_MODULE_2__
        );
        /* harmony import */ var image_data_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! image-data-uri */ "image-data-uri"
        );
        /* harmony import */ var image_data_uri__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          image_data_uri__WEBPACK_IMPORTED_MODULE_3__
        );
        /* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! fs */ "fs"
        );
        /* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          fs__WEBPACK_IMPORTED_MODULE_4__
        );

        async function makeQrImagesfromDB(
          messageArguments,
          receivedMessage,
          client
        ) {
          try {
            const { rows } = await Object(
              _db_db_qree__WEBPACK_IMPORTED_MODULE_1__["getWholeDB"]
            )();
            for (const {
              id,
              qr_image_url,
              qr_data,
              qr_link,
              name,
              platform,
              region,
              size,
              uploader_discord_id
            } of rows) {
              const obj = {
                name: name,
                qr_link: qr_link,
                qr_data: qr_data,
                qr_image: await Object(
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                    "createDataURLQrCode"
                  ]
                )(qr_link),
                platform: platform,
                region: region,
                size: size,
                uploader_discord_id,
                id
              };

              console.log(qr_image_url);

              if (qr_image_url === "null") {
                let string =
                  obj.name + obj.platform + obj.region + uploader_discord_id;
                string = string.replace(/[^a-z0-9]/gim, "").replace(/\s+/g, "");
                // console.log(string);
                await image_data_uri__WEBPACK_IMPORTED_MODULE_3___default.a.outputFile(
                  obj.qr_image,
                  "./img/" + string + ".png"
                );

                fs__WEBPACK_IMPORTED_MODULE_4___default.a.access(
                  "./img/" + string + ".png",
                  fs__WEBPACK_IMPORTED_MODULE_4___default.a.F_OK,
                  async err => {
                    if (err) {
                      console.error(err);
                      return;
                    }
                    const msg = await receivedMessage.channel.send("", {
                      files: ["./img/" + string + ".png"]
                    });
                    //file exists
                    console.log(msg.attachments.values().next().value.proxyURL);
                    obj.qr_image = msg.attachments
                      .values()
                      .next().value.proxyURL;
                    await Object(
                      _db_db_qree__WEBPACK_IMPORTED_MODULE_1__[
                        "updateQrImageUrl"
                      ]
                    )(obj.id, obj.qr_image);
                  }
                );
              }
            }
          } catch (e) {
            console.log(e);
          }

          // let data = []

          // const obj = {
          //   name: messageArguments[titleIndex].replace(/^"(.*)"$/, "$1"),
          //   qr_link: messageArguments[urlIndex],
          //   qr_data: await createASCIIQrCode(messageArguments[urlIndex]),
          //   qr_image_url: await createDataURLQrCode(messageArguments[urlIndex]),
          //   platform: messageArguments[platformIndex],
          //   region: messageArguments[regionIndex],
          //   size: messageArguments[sizeIndex],
          //   uploader_discord_id: receivedMessage.author.id,
          //   uploader_name: receivedMessage.author.username
          // };

          // imageDataURI.decode(obj.qr_data);

          // const { rows } = await findGame(obj.name.replace(/'/g, "''"));
          // const text =
          //   rows.length === 0
          //     ? "```diff\n" +
          //       "+ This is how it will look, save in database? Type 'yes'/'no'" +
          //       "\n```"
          //     : "```diff\n" +
          //       "- I FOUND THE GAMES WITH SIMILAR NAME, CHECK THEM BEFORE SAYING 'yes' GAMES BY TYPING 'search'" +
          //       "\n```" +
          //       "```diff\n" +
          //       "+ This is how it will look, save in database? Type 'yes'/'no' or 'search' if you want to check about what games I was talking about :)" +
          //       "\n```";
          // await receivedMessage.channel
          //   .send(
          //     "```" +
          //       "\nLink: " +
          //       obj.qr_link +
          //       "\n\nName: " +
          //       obj.name +
          //       "\nPlatform: " +
          //       obj.platform +
          //       "\nRegion: " +
          //       obj.region +
          //       "\nSize: " +
          //       obj.size +
          //       "\nUploader: " +
          //       obj.uploader_name +
          //       "```" +
          //       text,
          //     {
          //       files: [
          //         "./img/" +
          //           obj.name.replace(/ /g, "") +
          //           obj.platform +
          //           obj.region +
          //           obj.size +
          //           random +
          //           ".png"
          //       ]
          //     }
          //   )
          //   .then(msg => {
          //     obj.qr_image_url = msg.attachments.values().next().value.proxyURL;
          //   });
          //
          // // fs.unlink(
          // //   "./img/" +
          // //     obj.name.replace(/ /g, "") +
          // //     obj.platform +
          // //     obj.region +
          // //     obj.size +
          // //     random +
          // //     ".png",
          // //   err => {
          // //     if (err) {
          // //       console.error(err);
          // //     }
          // //   }
          // // );
          //
          // const collector = new MessageCollector(
          //   receivedMessage.channel,
          //   m => m.author.id === receivedMessage.author.id,
          //   { time: 60000 }
          // );
          // collector.on("collect", async message => {
          //   if (message.content.toLowerCase() === "yes") {
          //     collector.stop();
          //     try {
          //       await receivedMessage.channel.send("Saving in database!");
          //       await createQree(
          //         obj.qr_data,
          //         obj.qr_image_url,
          //         obj.qr_link,
          //         obj.name,
          //         obj.platform,
          //         obj.region,
          //         obj.size,
          //         obj.uploader_discord_id,
          //         obj.uploader_name
          //       );
          //
          //       // const QrCodesSubscription = sendToQrGames(obj, receivedMessage, client);
          //       // await QrCodesSubscription.build();
          //     } catch (e) {
          //       console.log(e);
          //       await receivedMessage.channel.send(
          //         "something went wrong, send it to developer: \n" +
          //           "```diff\n- " +
          //           e +
          //           "```"
          //       );
          //     }
          //   } else if (message.content.toLowerCase() === "no") {
          //     collector.stop();
          //
          //     try {
          //       await receivedMessage.channel.send("Ok try again later :P");
          //     } catch (e) {
          //       console.log(e);
          //       await receivedMessage.channel.send(
          //         "something went wrong, send it to developer: \n" +
          //           "```diff\n- " +
          //           e +
          //           "```"
          //       );
          //     }
          //   } else if (message.content.toLowerCase() === "search") {
          //     try {
          //       await receivedMessage.channel.send(
          //         "```Ok, displaying games that I have found you can type 'yes'/'no' still```"
          //       );
          //
          //       const QrCodesSearchResults = await createEmbeddedAnswer(
          //         rows,
          //         receivedMessage
          //       );
          //       await QrCodesSearchResults.build();
          //     } catch (e) {
          //       console.log(e);
          //       await receivedMessage.channel.send(
          //         "something went wrong, send it to developer: \n" +
          //           "```diff\n- " +
          //           e +
          //           "```"
          //       );
          //     }
          //   }
          // });
          //
          // collector.on("end", async () => {
          //   await receivedMessage.channel.send("upload session ended");
          // });
        }

        /***/
      },

    /***/ "./commands/index.js":
      /*!***************************!*\
  !*** ./commands/index.js ***!
  \***************************/
      /*! exports provided: scrapChannelForQrCodes, changeInvokeCommand, handleGameUpload, searchGame, handleGameEdit, createEmbeddedHelper, makeQrImagesfromDB */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var _scrap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ./scrap.js */ "./commands/scrap.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "scrapChannelForQrCodes",
          function() {
            return _scrap_js__WEBPACK_IMPORTED_MODULE_0__[
              "scrapChannelForQrCodes"
            ];
          }
        );

        /* harmony import */ var _invoke_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ./invoke.js */ "./commands/invoke.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "changeInvokeCommand",
          function() {
            return _invoke_js__WEBPACK_IMPORTED_MODULE_1__[
              "changeInvokeCommand"
            ];
          }
        );

        /* harmony import */ var _upload_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! ./upload.js */ "./commands/upload.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "handleGameUpload",
          function() {
            return _upload_js__WEBPACK_IMPORTED_MODULE_2__["handleGameUpload"];
          }
        );

        /* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! ./search.js */ "./commands/search.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "searchGame",
          function() {
            return _search_js__WEBPACK_IMPORTED_MODULE_3__["searchGame"];
          }
        );

        /* harmony import */ var _edit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! ./edit.js */ "./commands/edit.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "handleGameEdit",
          function() {
            return _edit_js__WEBPACK_IMPORTED_MODULE_4__["handleGameEdit"];
          }
        );

        /* harmony import */ var _help_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! ./help.js */ "./commands/help.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "createEmbeddedHelper",
          function() {
            return _help_js__WEBPACK_IMPORTED_MODULE_5__[
              "createEmbeddedHelper"
            ];
          }
        );

        /* harmony import */ var _images__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! ./images */ "./commands/images.js"
        );
        /* harmony reexport (safe) */ __webpack_require__.d(
          __webpack_exports__,
          "makeQrImagesfromDB",
          function() {
            return _images__WEBPACK_IMPORTED_MODULE_6__["makeQrImagesfromDB"];
          }
        );

        /***/
      },

    /***/ "./commands/invoke.js":
      /*!****************************!*\
  !*** ./commands/invoke.js ***!
  \****************************/
      /*! exports provided: changeInvokeCommand */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "changeInvokeCommand",
          function() {
            return changeInvokeCommand;
          }
        );
        function changeInvokeCommand(
          messageArguments,
          receivedMessage,
          serverInvokers
        ) {
          if (receivedMessage.channel.type === "dm") {
            return receivedMessage.channel.send(
              `This command is available only in servers`
            );
          }

          if (messageArguments.length > 3) {
            return receivedMessage.channel.send(
              `Too much arguments for invoke command`
            );
          }

          if (messageArguments[1]) {
            serverInvokers.set(receivedMessage.guild.id, messageArguments[1]);
            return receivedMessage.channel.send(
              `Successfully changed your invoke command`
            );
          }
        }

        /***/
      },

    /***/ "./commands/scrap.js":
      /*!***************************!*\
  !*** ./commands/scrap.js ***!
  \***************************/
      /*! exports provided: scrapChannelForQrCodes */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "scrapChannelForQrCodes",
          function() {
            return scrapChannelForQrCodes;
          }
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ../helpers/helpers */ "./helpers/helpers.js"
        );
        /* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! node-fetch */ "node-fetch"
        );
        /* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          node_fetch__WEBPACK_IMPORTED_MODULE_1__
        );
        /* harmony import */ var jimp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! jimp */ "jimp"
        );
        /* harmony import */ var jimp__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          jimp__WEBPACK_IMPORTED_MODULE_2__
        );
        /* harmony import */ var qrcode_reader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! qrcode-reader */ "qrcode-reader"
        );
        /* harmony import */ var qrcode_reader__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          qrcode_reader__WEBPACK_IMPORTED_MODULE_3__
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! ../db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! pg-escape */ "pg-escape"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          pg_escape__WEBPACK_IMPORTED_MODULE_5__
        );

        async function scrapChannelForQrCodes(
          messageArguments,
          receivedMessage
        ) {
          if (receivedMessage.channel.type === "dm") {
            return receivedMessage.channel.send(
              `This command is available only in servers`
            );
          }
          try {
            await receivedMessage.author.send(`Starting scrapping`);
            // await receivedMessage.channel.send(`scrapping...`);
            Object(
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                "limitlessFetchMessages"
              ]
            )(receivedMessage.channel).then(async messages => {
              for (const item of messages) {
                if (!!item.attachments.size) {
                  let metaInformation = item.content.match(
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__["regexes"]
                      .SCRAPER
                  );
                  if (metaInformation) {
                    metaInformation = metaInformation
                      .map(Function.prototype.call, String.prototype.trim)
                      .filter(function(el) {
                        if (el !== null && el !== " ") return el;
                      });
                  } else {
                    continue;
                  }

                  let name = metaInformation[0];

                  if (!name) {
                  } else {
                    name = name.replace(/^"(.*)"$/, "$1").replace(/'/g, "''");
                  }
                  metaInformation.shift();
                  const { rows } = await Object(
                    _db_db_qree__WEBPACK_IMPORTED_MODULE_4__["findGame"]
                  )(name);
                  if (rows.length) {
                    console.log(
                      "Game is already in DB " + name + " Skipping..."
                    );
                    continue;
                  }

                  const regionIndex = metaInformation.findIndex(value =>
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                      "regexes"
                    ].REGIONS.test(value)
                  );
                  const platformIndex = metaInformation.findIndex(value =>
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                      "regexes"
                    ].PLATFORMS.test(value)
                  );
                  const sizeIndex = metaInformation.findIndex(value =>
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                      "regexes"
                    ].SIZE.test(value)
                  );

                  const res = await node_fetch__WEBPACK_IMPORTED_MODULE_1___default()(
                    `${item.attachments.values().next().value.proxyURL}`
                  );
                  const buffer = await res.buffer();

                  const img = await jimp__WEBPACK_IMPORTED_MODULE_2___default.a
                    .read(buffer)
                    .catch(e => {
                      console.log(e);
                    });
                  if (!img) {
                    continue;
                  }
                  const qr = await new qrcode_reader__WEBPACK_IMPORTED_MODULE_3___default.a();

                  const value = await new Promise((resolve, reject) => {
                    qr.callback = (err, v) => {
                      err != null ? reject(err) : resolve(v);
                    };
                    qr.decode(img.bitmap);
                  }).catch(e => {
                    console.log(e);
                  });
                  if (value) {
                    // if (
                    //   value.result.match(regexes.DROPBOX) &&
                    //   value.result.match(regexes.CIA)
                    // ) {
                    //   value.result = parseDropboxLink(value.result);
                    //   value.result = value.result.match(/^(.*?)\.?dl=1/gi);
                    // }
                  } else {
                    continue;
                  }

                  const obj = {
                    name: name,
                    qr_link: value.result,
                    qr_data: await Object(
                      _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                        "createASCIIQrCode"
                      ]
                    )(value.result),
                    qr_image_url: null,
                    platform: metaInformation[platformIndex] || "3DS",
                    region: metaInformation[regionIndex] || "N/A",
                    size: metaInformation[sizeIndex] || "N/A",
                    uploader_discord_id: item.author.id,
                    uploader_name: item.author.username
                  };

                  if (!rows.length) {
                    try {
                      await Object(
                        _db_db_qree__WEBPACK_IMPORTED_MODULE_4__["createQree"]
                      )(
                        obj.qr_data,
                        obj.qr_image_url,
                        obj.qr_link,
                        obj.name,
                        obj.platform,
                        obj.region,
                        obj.size,
                        obj.uploader_discord_id,
                        obj.uploader_name
                      );
                      console.log("Saving in database! " + obj.name);
                    } catch (e) {
                      console.log(e);
                      await receivedMessage.author.send(
                        "something went wrong, send it to developer: \n" +
                          "```diff\n- " +
                          e +
                          "```"
                      );
                    }
                  }
                }
              }
            });
          } catch (e) {
            console.log(e);
          }
        }

        /***/
      },

    /***/ "./commands/search.js":
      /*!****************************!*\
  !*** ./commands/search.js ***!
  \****************************/
      /*! exports provided: searchGame */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "searchGame",
          function() {
            return searchGame;
          }
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ../db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ../helpers/helpers */ "./helpers/helpers.js"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! pg-escape */ "pg-escape"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          pg_escape__WEBPACK_IMPORTED_MODULE_2__
        );

        async function searchGame(messageArguments, receivedMessage) {
          try {
            // const games = await findGame(messageArguments[1])
            if (messageArguments.length !== 2) {
              return await receivedMessage.channel.send(
                `invalid arguments for search command`
              );
            }

            const name = pg_escape__WEBPACK_IMPORTED_MODULE_2___default.a
              .string(messageArguments[1].replace(/^"(.*)"$/, "$1"))
              .replace(/'/g, "''");
            const { rows } = await Object(
              _db_db_qree__WEBPACK_IMPORTED_MODULE_0__["findGame"]
            )(name);
            if (rows.length === 0) {
              if (
                Object(
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_1__["checkIfDM"]
                )(receivedMessage)
              ) {
                return await receivedMessage.channel.send(
                  `I didn't find anything called \`${messageArguments[1].replace(
                    /^"(.*)"$/,
                    "$1"
                  )}\` in my database. If you want to request games join https://discord.gg/uJnP5q`
                );
              } else {
                return await receivedMessage.channel.send(
                  `I didn't find anything called \`${messageArguments[1].replace(
                    /^"(.*)"$/,
                    "$1"
                  )}\` in my database. Please check <#582266411166990346> for it, if it's there please inform Uploaders/Mods/Bot Dev about adding it to the bot. If it's not there either request game on <#582262747937505290>`
                );
              }
            } else {
              const QrCodesSearchResults = await Object(
                _helpers_helpers__WEBPACK_IMPORTED_MODULE_1__[
                  "createEmbeddedAnswer"
                ]
              )(rows, receivedMessage);
              await QrCodesSearchResults.build();
            }
          } catch (e) {
            console.log(e);
            await receivedMessage.channel.send(
              "something went wrong, send it to developer: \n" +
                "```diff\n- " +
                e +
                "```"
            );
          }
        }

        /***/
      },

    /***/ "./commands/upload.js":
      /*!****************************!*\
  !*** ./commands/upload.js ***!
  \****************************/
      /*! exports provided: handleGameUpload */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "handleGameUpload",
          function() {
            return handleGameUpload;
          }
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! ../helpers/helpers */ "./helpers/helpers.js"
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ../db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! discord.js */ "discord.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          discord_js__WEBPACK_IMPORTED_MODULE_2__
        );
        /* harmony import */ var image_data_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! image-data-uri */ "image-data-uri"
        );
        /* harmony import */ var image_data_uri__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(
          image_data_uri__WEBPACK_IMPORTED_MODULE_3__
        );

        async function handleGameUpload(
          messageArguments,
          receivedMessage,
          client
        ) {
          try {
            if (messageArguments.length !== 6) {
              return receivedMessage.channel.send(
                `invalid arguments count for upload command`
              );
            }

            const urlIndex = messageArguments.findIndex(value =>
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__["regexes"].URL.test(
                value
              )
            );

            let url, title, region, platform, size;
            if (urlIndex === -1) {
              return receivedMessage.channel.send(
                `invalid arguments \`URL\` for upload command`
              );
            } else {
              url = messageArguments[urlIndex];
              messageArguments.splice(urlIndex, 1);
            }

            const titleIndex = messageArguments.findIndex(value =>
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                "regexes"
              ].TITLE.test(value)
            );
            if (titleIndex === -1) {
              return receivedMessage.channel.send(
                `invalid arguments \`TITLE\` for upload command`
              );
            } else {
              title = messageArguments[titleIndex];
              messageArguments.splice(titleIndex, 1);
            }

            const regionIndex = messageArguments.findIndex(value =>
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                "regexes"
              ].REGIONS.test(value)
            );
            if (regionIndex === -1) {
              return receivedMessage.channel.send(
                `invalid arguments \`REGION\` for upload command`
              );
            } else {
              region = messageArguments[regionIndex];
              messageArguments.splice(regionIndex, 1);
            }

            const platformIndex = messageArguments.findIndex(value =>
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                "regexes"
              ].PLATFORMS.test(value)
            );
            if (platformIndex === -1) {
              return receivedMessage.channel.send(
                `invalid arguments \`PLATFORM\` for upload command`
              );
            } else {
              platform = messageArguments[platformIndex];
              messageArguments.splice(platformIndex, 1);
            }

            const sizeIndex = messageArguments.findIndex(value =>
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                "regexes"
              ].SIZE.test(value)
            );
            if (sizeIndex === -1) {
              return receivedMessage.channel.send(
                `invalid arguments \`SIZE\` for upload command`
              );
            } else {
              size = messageArguments[sizeIndex];
              messageArguments.splice(sizeIndex, 1);
            }

            console.log(url, title, region, platform, size);

            if (
              url.match(
                _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__["regexes"].GDRIVE
              )
            ) {
              url = Object(
                _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__["parseGDriveLink"]
              )(url);
            } else if (
              url.match(
                _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__["regexes"].DROPBOX
              )
            ) {
              if (url.slice(-1) === "0" || url.slice(-1) === "1") {
                url = Object(
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                    "parseDropboxLink"
                  ]
                )(url);
                url = url.match(/^(.*?)\.?dl=1/gi);
              }
            }

            const obj = {
              name: title.replace(/^"(.*)"$/, "$1"),
              qr_link: url[0],
              qr_data: await Object(
                _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                  "createASCIIQrCode"
                ]
              )(url),
              qr_image_url: await Object(
                _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                  "createDataURLQrCode"
                ]
              )(url),
              platform: platform,
              region: region,
              size: size,
              uploader_discord_id: receivedMessage.author.id,
              uploader_name: receivedMessage.author.username
            };

            console.log(obj);

            // imageDataURI.decode(obj.qr_data);
            let string =
              obj.name + obj.platform + obj.region + obj.uploader_discord_id;
            string = string.replace(/[^a-z0-9]/gim, "").replace(/\s+/g, "");
            await image_data_uri__WEBPACK_IMPORTED_MODULE_3___default.a.outputFile(
              obj.qr_image_url,
              "./img/" + string + ".png"
            );

            const { rows } = await Object(
              _db_db_qree__WEBPACK_IMPORTED_MODULE_1__["findGame"]
            )(obj.name.replace(/'/g, "''"));
            const text =
              rows.length === 0
                ? "```diff\n" +
                  "+ This is how it will look, save in database? Type 'yes'/'no'" +
                  "\n```"
                : "```diff\n" +
                  "- I FOUND THE GAMES WITH SIMILAR NAME, CHECK THEM BEFORE SAYING 'yes' BY TYPING 'search'" +
                  "\n```" +
                  "```diff\n" +
                  "+ This is how it will look, save in database? Type 'yes'/'no' or 'search' if you want to check about what games I was talking about :)" +
                  "\n```";

            await receivedMessage.channel
              .send("", {
                files: ["./img/" + string + ".png"]
              })
              .then(msg => {
                obj.qr_image_url = msg.attachments
                  .values()
                  .next().value.proxyURL;
              });

            await receivedMessage.channel.send(
              "```" +
                "\nLink: " +
                obj.qr_link +
                "\n\nName: " +
                obj.name +
                "\nPlatform: " +
                obj.platform +
                "\nRegion: " +
                obj.region +
                "\nSize: " +
                obj.size +
                "\nUploader: " +
                obj.uploader_name +
                "```" +
                text
            );

            const collector = new discord_js__WEBPACK_IMPORTED_MODULE_2__[
              "MessageCollector"
            ](
              receivedMessage.channel,
              m => m.author.id === receivedMessage.author.id,
              { time: 60000 }
            );

            collector.on("collect", async message => {
              if (message.content.toLowerCase() === "yes") {
                collector.stop();
                try {
                  await receivedMessage.channel.send("Saving in database!");
                  await Object(
                    _db_db_qree__WEBPACK_IMPORTED_MODULE_1__["createQree"]
                  )(
                    obj.qr_data,
                    obj.qr_image_url,
                    obj.qr_link,
                    obj.name,
                    obj.platform,
                    obj.region,
                    obj.size,
                    obj.uploader_discord_id,
                    obj.uploader_name
                  );

                  const QrCodesSubscription = Object(
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                      "sendToQrGames"
                    ]
                  )(obj, receivedMessage, client);
                  await QrCodesSubscription.build();
                } catch (e) {
                  console.log(e);
                  await receivedMessage.channel.send(
                    "something went wrong, send it to developer: \n" +
                      "```diff\n- " +
                      e +
                      "```"
                  );
                }
              } else if (message.content.toLowerCase() === "no") {
                collector.stop();

                try {
                  await receivedMessage.channel.send("Ok try again later :P");
                } catch (e) {
                  console.log(e);
                  await receivedMessage.channel.send(
                    "something went wrong, send it to developer: \n" +
                      "```diff\n- " +
                      e +
                      "```"
                  );
                }
              } else if (message.content.toLowerCase() === "search") {
                try {
                  await receivedMessage.channel.send(
                    "```Ok, displaying games that I have found you can type 'yes'/'no' still```"
                  );

                  const QrCodesSearchResults = await Object(
                    _helpers_helpers__WEBPACK_IMPORTED_MODULE_0__[
                      "createEmbeddedAnswer"
                    ]
                  )(rows, receivedMessage);
                  await QrCodesSearchResults.build();
                } catch (e) {
                  console.log(e);
                  await receivedMessage.channel.send(
                    "something went wrong, send it to developer: \n" +
                      "```diff\n- " +
                      e +
                      "```"
                  );
                }
              }
            });

            collector.on("end", async () => {
              await receivedMessage.channel.send("upload session ended");
            });
          } catch (e) {
            console.log(e);
            await receivedMessage.channel.send(
              "something went wrong, send it to developer: \n" +
                "```diff\n- " +
                e +
                "```"
            );
          }
        }

        /***/
      },

    /***/ "./db/db_qree.js":
      /*!***********************!*\
  !*** ./db/db_qree.js ***!
  \***********************/
      /*! exports provided: createQree, editQree, findGame, findGameToEdit, approxQrCount, getWholeDB, updateQrImageUrl, updateSizeArgument, updateRegionArgument */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createQree",
          function() {
            return createQree;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "editQree",
          function() {
            return editQree;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "findGame",
          function() {
            return findGame;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "findGameToEdit",
          function() {
            return findGameToEdit;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "approxQrCount",
          function() {
            return approxQrCount;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "getWholeDB",
          function() {
            return getWholeDB;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "updateQrImageUrl",
          function() {
            return updateQrImageUrl;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "updateSizeArgument",
          function() {
            return updateSizeArgument;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "updateRegionArgument",
          function() {
            return updateRegionArgument;
          }
        );
        /* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! pg */ "pg"
        );
        /* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          pg__WEBPACK_IMPORTED_MODULE_0__
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! pg-escape */ "pg-escape"
        );
        /* harmony import */ var pg_escape__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          pg_escape__WEBPACK_IMPORTED_MODULE_1__
        );
        __webpack_require__(/*! dotenv */ "dotenv").config();

        function createDBclient() {
          return new pg__WEBPACK_IMPORTED_MODULE_0__["Client"]({
            connectionString: process.env.DATABASE_URL
          });
        }

        async function createQree(
          qrData,
          qrImageUrl,
          qrLink,
          name,
          platform,
          region,
          size,
          uploader_discord_id,
          uploader_name
        ) {
          const client = createDBclient();
          try {
            await client.connect();

            await client.query(
              `INSERT INTO qre_items(qr_data, qr_link, qr_image_url, name, platform, region, size, uploader_discord_id, uploader_name) 
      VALUES('${qrData}', '${qrLink}', '${qrImageUrl}' , '${name}' , '${platform}', '${region}', '${size}', '${uploader_discord_id}' , '${uploader_name}')`
            );
            await client.end();
            console.log("DB -> save qr in DB");
          } catch (e) {
            console.log(e);
          }
        }

        async function editQree(
          id,
          qrData,
          qrImageUrl,
          qrLink,
          name,
          platform,
          region,
          size,
          uploader_discord_id,
          uploader_name
        ) {
          const client = createDBclient();
          await client.connect();
          try {
            await client.query(
              `UPDATE qre_items SET qr_data = '${qrData}',
      qr_image_url = '${qrImageUrl}' ,
      qr_link = '${qrLink}', 
      name = '${name}', 
      platform = '${platform}', 
      region = '${region}' ,   
      size = '${size}' ,  
      uploader_discord_id = '${uploader_discord_id}' ,   
      uploader_name = '${uploader_name}' WHERE id = ${id}`
            );
            console.log("DB -> edited in DB");
            await client.end();
          } catch (e) {
            console.log(e);
          }
        }

        async function findGame(name) {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(
              `SELECT * FROM qre_items WHERE name ILIKE '%${name}%';`
            );
            // console.log("DB -> game found in DB");
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        async function findGameToEdit(id) {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(
              "SELECT * FROM qre_items WHERE id= " + id + " LIMIT 1;"
            );
            console.log("DB -> game found in DB");
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        async function approxQrCount() {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(`SELECT COUNT(*) FROM qre_items`);
            console.log("DB -> counting qr codes");
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        async function getWholeDB() {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(`SELECT * FROM qre_items`);
            console.log("DB -> getting whole DB");
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        async function updateQrImageUrl(id, qrImageUrl) {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(
              `UPDATE qre_items SET qr_image_url = '${qrImageUrl}' WHERE id = ${id}`
            );
            console.log("DB -> updating qr url image");
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        async function updateSizeArgument(id, size) {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(
              `UPDATE qre_items SET size = '${size}' WHERE id = ${id}`
            );
            console.log("DB -> updating size for id: " + id);
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        async function updateRegionArgument(id, region) {
          const client = createDBclient();
          try {
            await client.connect();
            const res = await client.query(
              `UPDATE qre_items SET region = '${region}' WHERE id = ${id}`
            );
            console.log("DB -> updating region for id: " + id);
            await client.end();
            return res;
          } catch (e) {
            console.log(e);
          }
        }

        /***/
      },

    /***/ "./helpers/helpers.js":
      /*!****************************!*\
  !*** ./helpers/helpers.js ***!
  \****************************/
      /*! exports provided: parseDropboxLink, parseGDriveLink, createASCIIQrCode, createDataURLQrCode, limitlessFetchMessages, createEmbeddedAnswer, sendToQrGames, urlStatus, updateSize, checkIfDM, regexes */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "parseDropboxLink",
          function() {
            return parseDropboxLink;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "parseGDriveLink",
          function() {
            return parseGDriveLink;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createASCIIQrCode",
          function() {
            return createASCIIQrCode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createDataURLQrCode",
          function() {
            return createDataURLQrCode;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "limitlessFetchMessages",
          function() {
            return limitlessFetchMessages;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "createEmbeddedAnswer",
          function() {
            return createEmbeddedAnswer;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "sendToQrGames",
          function() {
            return sendToQrGames;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "urlStatus",
          function() {
            return urlStatus;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "updateSize",
          function() {
            return updateSize;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "checkIfDM",
          function() {
            return checkIfDM;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "regexes",
          function() {
            return regexes;
          }
        );
        /* harmony import */ var qrcode_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! qrcode-generator */ "qrcode-generator"
        );
        /* harmony import */ var qrcode_generator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          qrcode_generator__WEBPACK_IMPORTED_MODULE_0__
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! discord.js */ "discord.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
          discord_js__WEBPACK_IMPORTED_MODULE_1__
        );
        /* harmony import */ var discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! discord-paginationembed */ "discord-paginationembed"
        );
        /* harmony import */ var discord_paginationembed__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
          discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! ../db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var url_status_code__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! url-status-code */ "url-status-code"
        );
        /* harmony import */ var url_status_code__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
          url_status_code__WEBPACK_IMPORTED_MODULE_4__
        );
        /* harmony import */ var request_promise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! request-promise */ "request-promise"
        );
        /* harmony import */ var request_promise__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          request_promise__WEBPACK_IMPORTED_MODULE_5__
        );
        /* harmony import */ var prettysize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! prettysize */ "prettysize"
        );
        /* harmony import */ var prettysize__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          prettysize__WEBPACK_IMPORTED_MODULE_6__
        );
        /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
          /*! axios */ "axios"
        );
        /* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __webpack_require__.n(
          axios__WEBPACK_IMPORTED_MODULE_7__
        );

        function dbInsert(obj) {
          //insert into database
          // return a promise that resolves when the database insertion is done
        }

        function parseDropboxLink(link) {
          let string = link;
          string = string.split("/");
          string[5] = "?dl=1";
          string = string.join("/");
          return string;
        }

        function parseGDriveLink(link) {
          return link.replace(
            /\/file\/d\/(.+)\/(.+)/,
            "/uc?export=download&id=$1"
          );
        }

        function createASCIIQrCode(link) {
          let qr = qrcode_generator__WEBPACK_IMPORTED_MODULE_0___default()(
            0,
            "L"
          );
          qr.addData(`${link}`);
          qr.make();
          return qr.createASCII(2, 1);
        }

        function createDataURLQrCode(link) {
          let qr = qrcode_generator__WEBPACK_IMPORTED_MODULE_0___default()(
            0,
            "M"
          );
          qr.addData(`${link}`);
          qr.make();
          return qr.createDataURL(5, 5);
        }

        async function limitlessFetchMessages(channel, limit = 9000) {
          const sum_messages = [];
          let last_id;

          while (true) {
            const options = { limit: 100 };
            if (last_id) {
              options.before = last_id;
            }

            const messages = await channel.messages.fetch(options);
            sum_messages.push(...messages.array());
            last_id = messages.last().id;

            if (messages.size !== 100 || sum_messages >= limit) {
              break;
            }
          }

          return sum_messages;
        }

        async function createEmbeddedAnswer(
          args,
          receivedMessage,
          destination
        ) {
          const embeds = [];
          args.map(
            async ({
              id,
              qr_link,
              name,
              platform,
              region,
              size,
              uploader_name,
              qr_image_url
            }) => {
              embeds.push(
                new discord_js__WEBPACK_IMPORTED_MODULE_1__["MessageEmbed"]()
                  .setImage(qr_image_url)
                  .addField("Name: ", name, true)
                  .addField("QR link: ", qr_link)
                  .addField("DB ID: ", id, true)
                  .addField("Platform: ", platform, true)
                  .addField("Region: ", region, true)
                  .addField("Size: ", size)
                  .addField("QR:", "===================", true)
                  .addField("Author: ", uploader_name, true)
              );
            }
          );

          return (
            new discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__["Embeds"]()
              .setArray(embeds)
              .setAuthorizedUsers([receivedMessage.author.id])
              .setChannel(
                destination === "pm"
                  ? receivedMessage.author
                  : receivedMessage.channel
              )
              .setPageIndicator(true)
              .setPage(1)
              // Methods below are for customising all embeds
              .setTitle("Qr Code 3DS games search collection")
              .setDescription(
                "=========================================================="
              )
              .setFooter("Bot created by: ProPanek#0188")
              .setColor(0x000000)
              .setNavigationEmojis({
                back: "◀",
                jump: "↗",
                forward: "▶",
                delete: "🗑"
              })
              .setTimeout(600000)
          );
        }

        function sendToQrGames(args, receivedMessage, client) {
          const embeds = [];

          console.log(client.channels.get("582266411166990346"));
          embeds.push(
            new discord_js__WEBPACK_IMPORTED_MODULE_1__["MessageEmbed"]()
              .setImage(args.qr_image_url)
              .addField("Name: ", args.name, true)
              .addField("QR link: ", args.qr_link)
              .addField("Platform: ", args.platform, true)
              .addField("Region: ", args.region, true)
              .addField("Size: ", args.size)
              .addField("QR: ", "===================", true)
              .addField("Author: ", args.uploader_name, true)
          );

          return (
            new discord_paginationembed__WEBPACK_IMPORTED_MODULE_2__["Embeds"]()
              .setArray(embeds)
              .setAuthorizedUsers([receivedMessage.author.id])
              .setChannel(client.channels.get("582266411166990346"))
              .setPage(1)
              // Methods below are for customising all embeds
              .setTitle("QR Code 3DS games subscription module")
              .setDescription(
                "=========================================================="
              )
              .setFooter("Bot created by: ProPanek#0188")
              .setColor(0x000000)
              .setDisabledNavigationEmojis(["ALL"])
              .setTimeout(600000)
          );
        }

        async function urlStatus(client) {
          await client.channels
            .get("604692669146333184")
            .send(`Checking urls started... I will do it every hour`);
          const { rows } = await Object(
            _db_db_qree__WEBPACK_IMPORTED_MODULE_3__["getWholeDB"]
          )();
          for (const { id, qr_link, name } of rows) {
            url_status_code__WEBPACK_IMPORTED_MODULE_4___default()(
              qr_link,
              async (error, statusCode) => {
                if (error) {
                } else {
                  console.log(statusCode);
                  if (statusCode === 404) {
                    await client.channels
                      .get("604692669146333184")
                      .send(
                        `This Game ${name} is giving 404 error (not found), DB ID to update link: ${id} . Mark it with some reaction if its fixed! `
                      );
                  }
                }
              }
            );
          }
        }

        async function updateSize(client) {
          const { rows } = await Object(
            _db_db_qree__WEBPACK_IMPORTED_MODULE_3__["getWholeDB"]
          )();
          for (const { id, qr_link, name, region } of rows) {
            axios__WEBPACK_IMPORTED_MODULE_7___default.a
              .get(qr_link)
              .then(async function(response) {
                console.log(response.status);
                if (response && response.status !== 404) {
                  const found_region = response.headers[
                    "content-disposition"
                  ].match(/\b\w*USA|JPN|EUR|GLOBAL|HACK|RF\w*\b/i);
                  if (found_region && region === "N/A") {
                    await Object(
                      _db_db_qree__WEBPACK_IMPORTED_MODULE_3__[
                        "updateRegionArgument"
                      ]
                    )(id, found_region[0]);
                  }
                  console.log(
                    prettysize__WEBPACK_IMPORTED_MODULE_6___default()(
                      response.headers["content-length"],
                      true
                    ),
                    name,
                    found_region,
                    id
                  );
                  await Object(
                    _db_db_qree__WEBPACK_IMPORTED_MODULE_3__[
                      "updateSizeArgument"
                    ]
                  )(
                    id,
                    prettysize__WEBPACK_IMPORTED_MODULE_6___default()(
                      response.headers["content-length"],
                      true
                    )
                  );
                }
              })
              .catch(e => {});
          }
        }

        function checkIfDM(receivedMessage) {
          return receivedMessage.channel.type === "dm";
        }

        const regexes = {
          DROPBOX: /\b(\w*dropbox\w*)\b/g,
          CIA: /\b(\w*cia\w*)\b/g,
          GDRIVE: /\b(\w*drive.google.com\w*)\b/g,
          URL: /(http|ftp|https):\/\/([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?/g,
          ARGUMENTS: /\b(\w*GBA|GBC|NES|SNES|MD|PCE|3DS|NEW3DS|DSI|ESHOP|NEW 3DS|NEO GEO\w*)\b|(\d+\.?\d+)\s*(KB|MB|GB|Bytes|Kilobytes|Megabytes)|(http|ftp|https):\/\/([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?|\w+|"(?:\\"|[^"])+"|\'(?:\\'|[^'])+'|\“(?:\\“|[^“])+|\S+/gi,
          TITLE: /"(?:\\"|[^"])+"|\'(?:\\'|[^'])+'|\“(?:\\“|[^“])+“/g,
          REGIONS: /\b\w*USA|JPN|EUR|GLOBAL|HACK\w*\b/gi,
          PLATFORMS: /\b\w*GBA|GBC|NES|SNES|MD|PCE|3DS|NEW3DS|DSiWare|DSI|ESHOP|NEW 3DS|NEO GEO\w*\b/gi,
          SIZE: /(\d*\.?\d+)\s*(KB|MB|GB|Bytes|Kilobytes|Megabytes)/gi,
          SCRAPER: /\b([^\(]+)|\((.*?)\)|(\w*GBA|NES|SNES|3DS|NEW3DS|DSI|ESHOP|NEW 3DS|NEO GEO\w*)\b|(http|ftp|https):\/\/([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:/~+#-]*[\w@?^=%&/~+#-])?|\w+|"(?:\\"|[^"])+"|\'(?:\\'|[^'])+'|\S+/gi
        };
        //(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?\w+|"(?:\\"|[^"])+"|'(?:\\'|[^"])+'|\w+

        /***/
      },

    /***/ "./models/database.js":
      /*!****************************!*\
  !*** ./models/database.js ***!
  \****************************/
      /*! exports provided: initializeDb */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "initializeDb",
          function() {
            return initializeDb;
          }
        );
        /* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! pg */ "pg"
        );
        /* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          pg__WEBPACK_IMPORTED_MODULE_0__
        );
        __webpack_require__(/*! dotenv */ "dotenv").config();

        async function initializeDb() {
          try {
            const client = await new pg__WEBPACK_IMPORTED_MODULE_0__["Client"]({
              connectionString: process.env.DATABASE_URL
            });
            await client.connect();
            await client.query(
              "CREATE TABLE IF NOT EXISTS qre_items(id SERIAL PRIMARY KEY, " +
                "qr_data text not null, " +
                "qr_image_url text not null, " +
                "qr_link varchar not null, " +
                "name varchar not null, " +
                "platform varchar not null, " +
                "region varchar not null," +
                "size varchar not null," +
                "uploader_discord_id varchar not null," +
                "uploader_name varchar not null" +
                ")"
            );

            client.end();
          } catch (e) {
            console.log(e);
          }
        }

        /***/
      },

    /***/ "./server.js":
      /*!*******************!*\
  !*** ./server.js ***!
  \*******************/
      /*! no exports provided */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
          /*! discord.js */ "discord.js"
        );
        /* harmony import */ var discord_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(
          discord_js__WEBPACK_IMPORTED_MODULE_0__
        );
        /* harmony import */ var _commands_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
          /*! ./commands/index */ "./commands/index.js"
        );
        /* harmony import */ var _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
          /*! ./helpers/helpers */ "./helpers/helpers.js"
        );
        /* harmony import */ var _models_database__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
          /*! ./models/database */ "./models/database.js"
        );
        /* harmony import */ var _db_db_qree__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
          /*! ./db/db_qree */ "./db/db_qree.js"
        );
        /* harmony import */ var request__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
          /*! request */ "request"
        );
        /* harmony import */ var request__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __webpack_require__.n(
          request__WEBPACK_IMPORTED_MODULE_5__
        );
        /* harmony import */ var prettysize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
          /*! prettysize */ "prettysize"
        );
        /* harmony import */ var prettysize__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(
          prettysize__WEBPACK_IMPORTED_MODULE_6__
        );
        __webpack_require__(/*! dotenv */ "dotenv").config();

        process.on("unhandledRejection", (err, p) => {
          console.log("An unhandledRejection occurred");
          console.log(`Rejected Promise: ${p}`);
          console.log(`Rejection: ${err}`);
        });

        void (async function() {
          try {
            await Object(
              _models_database__WEBPACK_IMPORTED_MODULE_3__["initializeDb"]
            )();
            console.log("DB -> init DB");
          } catch (e) {
            console.log(e);
          }

          try {
            await client.login(process.env.BOT_TOKEN);
          } catch (e) {
            console.log(e);
          }
        })();

        const client = new discord_js__WEBPACK_IMPORTED_MODULE_0__["Client"]();
        let botInvoker = process.env.BOT_DEFAULT_INVOKE;
        let serverInvokers = new Map();

        client.on("ready", async () => {
          console.log("On Discord!");
          console.log("Connected as " + client.user.tag);
          console.log("Servers:");
          client.guilds.forEach(guild => {
            serverInvokers.set(guild.id, botInvoker);
            console.log(" - " + guild.id);
            guild.channels.forEach(channel => {
              console.log(
                ` -- ${channel.name} (${channel.type}) - ${channel.id}`
              );
            });

            console.log(serverInvokers);
          });

          setInterval(async () => {
            const qrCount = await Object(
              _db_db_qree__WEBPACK_IMPORTED_MODULE_4__["approxQrCount"]
            )();
            qrCount.rows.map(async ({ count }) => {
              await client.user.setActivity(`QR Codes count: ${count}`, {
                type: "PLAYING"
              });
            });
          }, 60000);

          setInterval(async () => {
            await Object(
              _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["urlStatus"]
            )(client);
          }, 1000 * 60 * 60);
        });

        client.on("message", receivedMessage => {
          if (receivedMessage.author === client.user) {
            // Prevent bot from responding to its own messages
            return;
          }

          if (receivedMessage.channel.type === "dm") {
            if (receivedMessage.content.startsWith(`${botInvoker}`)) {
              processCommand(receivedMessage);
            } else {
              return receivedMessage.channel.send(
                `You need to specify which command you want to use type "!qre help" to display available commands`
              );
            }
          } else {
            if (
              receivedMessage.content.startsWith(
                `${serverInvokers.get(receivedMessage.guild.id)}`
              )
            ) {
              processCommand(receivedMessage);
            }
          }
        });

        function processCommand(receivedMessage) {
          let fullCommand, primaryCommand;

          Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["checkIfDM"])(
            receivedMessage
          )
            ? (fullCommand = receivedMessage.content.substr(
                botInvoker.length + 1
              ))
            : (fullCommand = receivedMessage.content.substr(
                serverInvokers.get(receivedMessage.guild.id).length + 1
              ));

          const messageArguments = fullCommand.match(
            _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["regexes"].ARGUMENTS
          );

          if (messageArguments !== null && messageArguments.length) {
            primaryCommand = messageArguments[0]; // The first word directly after the exclamation is the command
          }

          if (
            primaryCommand === "" ||
            primaryCommand === null ||
            primaryCommand === undefined
          ) {
            Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["checkIfDM"])(
              receivedMessage
            )
              ? receivedMessage.channel.send(
                  `You need to specify which command you want to use type "!qre help" to display available commands`
                )
              : receivedMessage.channel.send(
                  `You need to specify which command you want to use type "${serverInvokers.get(
                    receivedMessage.guild.id
                  )} help" to display available commands`
                );
            return;
          }

          if (primaryCommand === "help") {
            return Object(
              _commands_index__WEBPACK_IMPORTED_MODULE_1__[
                "createEmbeddedHelper"
              ]
            )(serverInvokers, receivedMessage).build();
          }

          if (primaryCommand === "search") {
            return Object(
              _commands_index__WEBPACK_IMPORTED_MODULE_1__["searchGame"]
            )(messageArguments, receivedMessage);
          }

          if (
            !Object(_helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["checkIfDM"])(
              receivedMessage
            )
          ) {
            if (
              process.env.BOT_PERMISSIONS_GUILD.includes(
                receivedMessage.guild.id
              ) &&
              receivedMessage.member.roles.some(r =>
                process.env.BOT_PERMISSIONS_ROLES.includes(r.name)
              )
            ) {
              if (primaryCommand === "upload") {
                return Object(
                  _commands_index__WEBPACK_IMPORTED_MODULE_1__[
                    "handleGameUpload"
                  ]
                )(messageArguments, receivedMessage, client);
              }

              if (primaryCommand === "invoke") {
                return Object(
                  _commands_index__WEBPACK_IMPORTED_MODULE_1__[
                    "changeInvokeCommand"
                  ]
                )(messageArguments, receivedMessage, serverInvokers);
              }

              if (primaryCommand === "scrap") {
                return Object(
                  _commands_index__WEBPACK_IMPORTED_MODULE_1__[
                    "scrapChannelForQrCodes"
                  ]
                )(messageArguments, receivedMessage);
              }

              if (primaryCommand === "images") {
                return Object(
                  _commands_index__WEBPACK_IMPORTED_MODULE_1__[
                    "makeQrImagesfromDB"
                  ]
                )(messageArguments, receivedMessage);
              }

              if (primaryCommand === "edit") {
                return Object(
                  _commands_index__WEBPACK_IMPORTED_MODULE_1__["handleGameEdit"]
                )(messageArguments, receivedMessage);
              }

              if (primaryCommand === "checkurls") {
                return Object(
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["urlStatus"]
                )(client);
              }

              if (primaryCommand === "updatesize") {
                return Object(
                  _helpers_helpers__WEBPACK_IMPORTED_MODULE_2__["updateSize"]
                )(client);
              }
            } else {
              return receivedMessage.channel.send(
                "You have no permissions to use this commands or command is not found"
              );
            }
          }

          return receivedMessage.channel.send(`Command not found`);
        }

        /***/
      },

    /***/ axios:
      /*!************************!*\
  !*** external "axios" ***!
  \************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("axios");

        /***/
      },

    /***/ "discord-paginationembed":
      /*!******************************************!*\
  !*** external "discord-paginationembed" ***!
  \******************************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("discord-paginationembed");

        /***/
      },

    /***/ "discord.js":
      /*!*****************************!*\
  !*** external "discord.js" ***!
  \*****************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("discord.js");

        /***/
      },

    /***/ dotenv:
      /*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("dotenv");

        /***/
      },

    /***/ fs:
      /*!*********************!*\
  !*** external "fs" ***!
  \*********************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("fs");

        /***/
      },

    /***/ "image-data-uri":
      /*!*********************************!*\
  !*** external "image-data-uri" ***!
  \*********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("image-data-uri");

        /***/
      },

    /***/ jimp:
      /*!***********************!*\
  !*** external "jimp" ***!
  \***********************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("jimp");

        /***/
      },

    /***/ "node-fetch":
      /*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("node-fetch");

        /***/
      },

    /***/ pg:
      /*!*********************!*\
  !*** external "pg" ***!
  \*********************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("pg");

        /***/
      },

    /***/ "pg-escape":
      /*!****************************!*\
  !*** external "pg-escape" ***!
  \****************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("pg-escape");

        /***/
      },

    /***/ prettysize:
      /*!*****************************!*\
  !*** external "prettysize" ***!
  \*****************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("prettysize");

        /***/
      },

    /***/ "qrcode-generator":
      /*!***********************************!*\
  !*** external "qrcode-generator" ***!
  \***********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("qrcode-generator");

        /***/
      },

    /***/ "qrcode-reader":
      /*!********************************!*\
  !*** external "qrcode-reader" ***!
  \********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("qrcode-reader");

        /***/
      },

    /***/ request:
      /*!**************************!*\
  !*** external "request" ***!
  \**************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("request");

        /***/
      },

    /***/ "request-promise":
      /*!**********************************!*\
  !*** external "request-promise" ***!
  \**********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("request-promise");

        /***/
      },

    /***/ "url-status-code":
      /*!**********************************!*\
  !*** external "url-status-code" ***!
  \**********************************/
      /*! no static exports found */
      /***/ function(module, exports) {
        module.exports = require("url-status-code");

        /***/
      }

    /******/
  }
);
